---
- name: onboot - query package version
  register: onboot_version
  ignore_errors: true
  raw: "{{ unifi_os_cmd }} dpkg-query --showformat='${Version}' --show udm-boot"

- name: onboot - installation
  when: onboot_version is not defined or ( onboot_version.stdout is defined and onboot_version.stdout != udm_onboot_version )
  block:
    - name: onboot - download package
      raw: curl -L "{{ udm_onboot_download_uri }}" -o "{{ unifi_mount_path }}/unifi-os/udm-boot-{{ udm_onboot_version }}.deb"
    - name: onboot - install package
      raw: "{{ unifi_os_cmd }} dpkg -i {{ unifi_os_mount_path }}/udm-boot-{{ udm_onboot_version }}.deb"
  notify: restart udm boot service

- name: onboot - ensure onboot directory exists
  raw: mkdir -p "{{ unifi_onboot_directory }}"

- name: onboot - deploy custom configurations
  delegate_to: localhost
  become: false
  with_items:
    - file: "files/00-onboot-sshkeys.sh"
      enabled: true
    - file: "files/05-onboot-container.sh"
      enabled: true
    - file: "files/10-onboot-frr.sh"
      enabled: "{{ frr_enabled | bool }}"
    - file: "files/10-onboot-rsyncd.sh"
      enabled: "{{ rsyncd_enabled | bool }}"
    - file: "files/10-onboot-nodeexporter.sh"
      enabled: "{{ nodeexporter_enabled | bool }}"
    - file: "files/10-onboot-openvpn.sh"
      enabled: "{{ openvpn_enabled | bool }}"
    - file: "files/10-onboot-zerotier.sh"
      enabled: "{{ zerotier_enabled | bool }}"
    - file: "files/10-onboot-cloudflare-ddns.sh"
      enabled: "{{ cloudflare_enabled | bool }}"

  shell:
    cmd: "[ '{{ item.enabled }}' = 'True' ] \
      && scp {{ role_path }}/{{ item.file }} {{ ansible_user }}@{{ inventory_hostname }}:{{ unifi_onboot_directory }}/ \
      || echo 'item disabled: {{ item.file }}'"
  notify: restart udm boot service

- name: onboot - FRR configuration
  when: frr_enabled
  tags:
    - frr
  block:
    - name: onboot - FRR - FRR config directory
      file:
        path: "{{ unifi_onboot_frr_config_dir }}"
        mode: 0744
        state: directory
    - name: onboot - FRR - empty vtysh config file
      copy:
        content: ""
        dest: "{{ unifi_onboot_frr_config_dir }}/vtysh.conf"
        force: false
        mode: 0666
    - name: onboot - FRR - daemons config file
      copy:
        src: frr-daemons
        dest: "{{ unifi_onboot_frr_config_dir }}/daemons"
        mode: 0666
      notify: restart frr container
    - name: onboot - FRR - FRR config file
      template:
        src: frr.conf.j2
        dest: "{{ unifi_onboot_frr_config_dir }}/frr.conf"
        mode: 0666
      notify: restart frr container

- name: onboot - enasure executable flag is set on scripts
  raw: chmod +x {{ unifi_onboot_directory }}/*.sh

- name: deploy external dns force configuration
  when: force_external_dns and ( udmp_external_dns_server_ipv4 is defined or udmp_external_dns_server_ipv6 is defined )
  tags:
    - external_dns
  template:
    src: force-dns.sh.j2
    dest: "{{ unifi_onboot_directory }}/99-force-dns.sh"
    mode: 0755
  notify: restart udm boot service

- name: deploy cloudflare configuration
  when: cloudflare_enabled
  tags:
    - cloudflare
  template:
    src: cloudflare_config.json.j2
    dest: /mnt/data/cloudflare-ddns/config.json
    mode: 0644
  notify: restart udm boot service
# - name: run udm boot service
#   raw: "{{ unifi_os_cmd }} systemctl restart udm-boot"
